import re 


"""
Основні компоненти регулярних виразів включають:

Літерали. Пряме відображення символів (наприклад, a, B, 1).
Метасимволи. Символи, які мають спеціальне значення в регулярних виразах (наприклад, . (крапка) відповідає будь-якому символу).
Квантифікатори. Визначають, скільки разів елемент повинен відповідати (наприклад * означає 0 або більше повторень).
Класи символів. Визначають групи символів (наприклад, [a-z] відповідає будь-якій малій літері).
Групи та діапазони. Використовуються для групування частин виразу (наприклад, (abc) визначає групу символів).
Альтернації. Відповідає одному з декількох шаблонів (наприклад, a|b відповідає a або b).
Якорі. Визначають позиції у тексті (наприклад, ^ для початку рядка, $ для кінця рядка).


Основні функції модуля re які ми розглянемо далі це:

re.search(pattern, string) - виконує пошук першого входження шаблону в рядку.
re.findall(pattern, string) - виконує знаходження всіх входжень шаблону в рядку.
re.sub(pattern, repl, string) - виконує заміну входжень шаблону на інший рядок.
re.split(pattern, string) виконує розбивання рядка за шаблоном.

Прикладом блоку може бути:

\w — будь-яка цифра або буква [a-zA-Z0-9_] (\W — все, крім букви або цифри [^a-za-z0-9_])
\d — будь-яка цифра [0-9] (\D — усе, крім цифри [^0-9])
\s — будь-який пробільний символ [\t\n\r\f\v] (\S — усе, крім пробільних символів [^\t\n\r\f\v])
\b — межа слова
[...] — один із символів у дужках ([^ ] — будь-який символ, крім тих, що в дужках)
^ і $ — початок і кінець рядка відповідно
( ) — групує вираз і повертає знайдений текст
\t, \n, \r — символ табуляції, нового рядка та повернення каретки
Символ . у регулярних виразах представляє будь-який один символ.
Символ * в регулярних виразах використовується для позначення групи символів, яка може повторюватися 0 або більше разів.
"""


text = "Вивчення Python може бути веселим."
pattern = r"в\w*м"
# Тут змінна pattern зберігає регулярний вираз r"в\w*м":
# r означає "сирий" рядок (raw string), який каже Python ігнорувати спеціальні символи такі як \n, \t тощо, оскільки це рядок для регулярних виразів.
# в - шукаємо слово яке починається на букву "в".
# \w* - це означає будь-яка кількість букв включно з нулем букв. Бо \w відповідає будь-якому "словесному" символу, а * є квантифікатором, який означає "нуль або більше входжень попереднього елемента".
# м - шукаємо слово яке закінчується на "м".

match = re.search(pattern, text, re.IGNORECASE)

if match:
    print("Знайдено:", match.group())




text = "Моя електронна адреса: example@example.com"
pattern = r"\w+@\w+\.\w+"
"""
У цьому прикладі регулярний вираз \w+@\w+\.\w+ шукає електронну адресу:

\w+ - спочатку повинні йти одна або більше букв або цифр.
@ - далі обов'язково повинен бути символ @.
\w+ - після символу @ повинна йти ще одна серія букв.
\. - серія букв повинна закінчитись символом крапки. Ми екрануємо його, бо в регулярному виразі, крапка є модифікатором та має спеціальне значення.
\w+ - далі йде серія букв після крапки.
"""
match = re.search(pattern, text)

if match:
    print("Електронна адреса:", match.group())



phone = """
        Михайло Куліш: 050-171-1634
        Вікторія Кущ: 063-134-1729
        Оксана Гавриленко: 068-234-5612
        """
pattern = r"(\d{3})-(\d{3})-(\d{4})"
replacement = r"(\1) \2-\3"
formatted_phone = re.sub(pattern, replacement, phone)

print(formatted_phone)



text = "Python - це проста, але потужна мова програмування."
pattern = r"\s+"
words = re.split(pattern, text)

print(words)  # Виведе список слів у рядку



text = "apple#banana!mango@orange;kiwi"
pattern = r"[#@;!]"
fruits = re.split(pattern, text)

print(fruits)
